self study

1/29/23
SSO OpenID OAuth2.0

researched, keep researching oath2.0, azure ad (enterprise application), nodejs
--saml 2--, 
sso

https://learn.microsoft.com/en-us/azure/active-directory/develop/single-sign-on-saml-protocol

tutorial -> E:/Projects/Azure/ExpressWebApp

https://learn.microsoft.com/en-us/azure/active-directory/develop/tutorial-v2-nodejs-webapp-msal

What is OAuth 2.0?
https://auth0.com/intro-to-iam/what-is-oauth-2

SSO with OIDC:
https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-protocols-oidc

----------
msal tutorial covered OIDC and OAuth2.0,
SSO already set by OIDC.

use msal for nodejs -> send session access token and id to front-end
https://github.com/Azure-Samples/ms-identity-node
https://www.npmjs.com/package/@azure/msal-node

wip:
Azure Logic Apps,
control flow, data (Variables, csv, html, json),
connectors (Sql)

1/30/23
continue learning logic apps with USRealEstate database
https://learn.microsoft.com/en-us/azure/logic-apps/logic-apps-perform-data-operations?tabs=consumption

-----
2/4/23
[x] -dom traversal better, web dev simplified (E:/Projects/Javascript/domTraversal).
[x] - staruml better flow chart sample blackboard (E:/Projects/StarUMLs/FlowChartSampleBlackboard.mdj).
[x] - R, python w3schools, pandas cheat sheet review
https://www.w3schools.com/python/python_datetime.asp
https://www.w3schools.com/r/default.asp
https://pandas.pydata.org/Pandas_Cheat_Sheet.pdf
-research parcel, vite (hot reload builder, liveserver?)
https://parceljs.org/
https://vitejs.dev/guide/assets.html

-- 
fun project:
- re-create blackboard data flow from work
1)
[x] 1. create azure function, trigger on http
[x] 2. from http trigger body, add file name and content (json) to queue
[x] 3. azure function reads file name and content from queue
4. parse and insert file name and content into database [x](USRealEstate.Course_Grades_WB_Stg)
[] 5. use a merge stored proc to upsert the new records (if exists, update, otherwise, insert to table)

2)
[x] 1. create sample 20230204_course_grades.csv
[x] 2. create logic app to detect new file, and call http post method in azure function.
[x] 3. upload to blob storage (use azure portal -> Whiteboard/file)

ISSUE: SqlAlchemy Connection object has no attribute connect
RESOLVED: SqlAlchemy==1.4.16 (don't use the latest version 2.0+, since currently, it breaks the code to work with pandas df.to_sql)
(change sqlalchemy in requirements.txt to SQLAlchemy==1.4.46)

-- 2/16/23

StarSchemas using ERDPlus.com
File path: E:\Projects\GradesStarSchema

LMSStarSchema DB SSMS. Shop StarSchema erdplus.com/documents -> Google account

-------
Issue please:

pdfs are out of order, make them in order.

pages are not in order.

giant pdf, pages no tin order.

determine order. 

architecture with architecture - 
also out of order.
100 pages
- 1 - 100.
- not always, site plans, 100s, 200s elevations 300s, details 400s,
elevations one sheet in elevation. many sheets in that section.

incremental order thats all.
irreleaevant secitons. only order 1-500 e.g.
discipline, 1-2 letters, follow up by numbers.

A - 1 arch
S - 1 struc
C - 1 civil
split into folders, a, c, s.
,  legend, bottom right corner. 
same exact location - title block.
project name, sheet address.
if it falls within coords, then read that text and extract.
not all drawings. 
some letters, misc.

misc in separate folder. by the size of sheet. 
drawings, construction documents 24 by 26 <- separate folders

reg 8 1/2 by 11 sheets seprate folder. <- misc folder.


civil civl, eletrcical eletrciacl,
firesafety, landscape, interior design

unknown.

 hey chatgpt, can you help me write a python script that opens and checks through several pdf files that have a letter or letters followed by an incremental number (e.g. A-1, A-2) in the bottom right corner, and then categorizes them and inserts them into separate folders according to the letter (e.g. folder A has A-1, A-2, etc). and also, if they don't have a letter and a number in the bottom right corner, then categorize them and insert them into a miscellaneous folder?

thanks! can you modify the code so that it searches for 2 letters followed by either a period (.) dash (-) or a space ( ), and then a decimal which can be optionally followed by a lowercase letter? (e.g. LS 1.6a) and also if it finds the match, automatically creates a new folder if it doesn't exist for the first 2 or 1 letter? (e.g. LS 1.6a would create a LS folder to fill in with it's files, E-101 would create a E folder to fill in with it's files, etc)

pytesseract.pytesseract.tesseract_cmd = 'E:\\Tesseract-OCR\\tesseract.exe'

[] - issues with regex,
 - find all first letter or second (e.g. LS-102)
	and match only with those specific letters.

[FA, FP, C, LA, A, M, E, P, LS], CS 

[] - A it got alot correct, some incorrect
[] - C it got alot incorrect, some correct.
[] - E it got alot correct, some incorrect
[] - FA it got ALL correct
[] - FP it got ALL correct
[] - LA it got ~ALL correct
[] - LS it got ALL - 1 correct
[] - M it got MOST ALL correct
[] - P it got ~ALL correct
[] - S, almost all are A
	- 200+ - 260 S
[] - misc it got alot incorrect, labels not in subfolders.
	-188 files. 
180 almost correct files in subfolders, 
188 in misc

options:
1. rerun algorithm on misc
2. manually insert from misc to subfolders

lmk,
thanks.



